                                                                                              ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
                                                                                              │ 16                                                                                                                                                                      │
                                                                                              │                                                                                                                                                                         │
                                                                                              │  4   Magic bytes    Used by applications to determine that it's an ELF file                                                                                             │
                                                                                              │  1   EI_CLASS       Class: Type of binary (32 bit [ELFCLASS32 = 1] or 64 bit [ELFCLASS64 = 2])                                                                          │
                                                                                              │  1   EI_DATA        Data : Endianness (little endian [ELFDATA2LSB = 1] or big endian [ELFDATA2MSB = 2])                                                                 │
                                                                                        ┌─────►  1   EI_VERSION     Version = EV_CURRENT = 1                                                                                                                            │
                                                                                        │     │  1   EI_OSABI       OS/ ABI for which the binary has been compiled. If non zero, it can mean there are some OS specific thingy in it and 0 indicates UNIV System V ABI  │
                                                                                        │     │  1   EI_ABIVERSION  ABI version = 0: specific version of the ABI mentioned in OS/ABI that the binary targets                                                            │
                                                                                        │     │  7   EI_PAD         Padding b/w other layers and reserved for future usage                                                                                              │
                                                                                        │     └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
                                                                                        │
                                                                                        │
                                                                                        │                                                                ┌────────────────────────────────────────────┐
                                                                                        │         ELF header                                             │Type of the executable                      │
                                                                                        │        ┌────────────────────────────────────┐                  │ET_REL : Relocatable object file            │
                                                                                        │        │ typedef struct                     │         ┌───────►│ET_EXEC: Executable binary                  │
                                                                                        │        │ {                                  │         │        │ET_DYN : Shared object file/ dynamic library│
                                                                                        └────────┤   unsigned char e_ident[EI_NIDENT];│         │        └────────────────────────────────────────────┘
                                                                                                 │   Elf64_Half    e_type;            ├─────────┘
                                                                                                 │   Elf64_Half    e_machine;         │Architecture the binary is supposed to run upon
                                                                                                 │   Elf64_word    e_version;         │Same as EI_VERSION
                                                                                                 │   Elf64_Addr    e_entry;           │Virtual address where the execution flow must jump to, at the start
                                                                                                 │   Elf64_Off     e_phoff;           │Offset into the binary where program header table is located
                                                                                                 ┤   Elf64_Off     e_shoff;           │Offset into the binary where section header table is located (section header table is optional because it's mainly for the linker)
                                                                                                 │   Elf64_Word    e_flags;           │Flags specific to the architecture, for x86/ x86_64 it's typically set to 0
                                                                                                 │   Elf64_Half    e_ehsize;          │Size of the executable header (in bytes), 64 byte for 64-bit x86_64 binaries and 53-bytes for 32-bit x86 binaries
                                                                                                 │   Elf64_Half    e_phentsize;       │Size of program headers
                                                                                                 │   Elf64_Half    e_phnum;           │Number of program headers
                                                                                                 │   Elf64_Half    e_shentsize;       │Size of section headers
                                                                                                 │   Elf64_Half    e_shnum;           │Number of section headers
                                                                                                 │   Elf64_Half    e_shstrndx;        │Index (in section header table) where the string table is located, which stores names of all sections in the binary
                                                                                                 │ } Elf64_Ehdr;                      │
                                                                                                 │                                    │
                                                                                                 └────────────────────────────────────┘